@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root class="@(ShouldFade ? "invisible" : "")" style="transition: opacity @(FadeOutTime)s ease-in;">
    <div class="shadow">
        <div class="text" style="color: @TextHex;">@VictoryText</div>
        <div class="text blurry" style="color: @TextBlurryHex;">@VictoryText</div>
    </div>
</root>

@code
{
    public enum VictoryTextColor
    {
        Red,
        Yellow
    }

    private static readonly Dictionary<VictoryTextColor, Color> TextColorMap = new()
    {
        { VictoryTextColor.Red, Color.Parse( "#8d1125" ).Value },
        { VictoryTextColor.Yellow, Color.Parse( "#f2d600" ).Value }
    };

    [Property] public string VictoryText { get; set; } = "YOU'RE WINNER !";
    [Property] public VictoryTextColor TextColor { get; set; } = VictoryTextColor.Yellow;
    [Property] public float FadeOutTime { get; set; } = 3f;
    [Property] public float FadeOutStartTime { get; set; } = 3f;

    protected override int BuildHash() => System.HashCode.Combine( VictoryText, TextColor, ShouldFade );

    private string TextHex => TextColorMap[TextColor].Hex;
    private string TextBlurryHex => TextColorMap[TextColor].WithAlpha( 0.5f ).Hex;
    private bool ShouldFade => _sinceEnabled > FadeOutStartTime;
    private TimeSince _sinceEnabled = 0f;

    protected override void OnEnabled()
    {
        base.OnEnabled();
        _sinceEnabled = 0f;
    }

    protected override void OnUpdate()
    {
        // The message should have faded in and out by now.
        if ( _sinceEnabled > FadeOutStartTime + FadeOutTime )
        {
            Enabled = false;
        }
    }
}
